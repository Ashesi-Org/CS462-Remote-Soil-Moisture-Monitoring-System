name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: eco-go-cluster
  GKE_ZONE: us-central1
  DOCKER_USERNAME: joelkodji
  DEPLOYMENT_NAME: eco-go

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_pgsql, curl, dom
        coverage: xdebug

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Delete composer.lock
      run: rm -f composer.lock

    - name: Install dependencies
      run: |
        composer install --prefer-dist --no-progress --no-suggest
        composer dump-autoload -o

    - name: Run PHP Code Sniffer
      run: vendor/bin/phpcs --standard=PSR12 src/ || true

    - name: Run PHPUnit tests
      run: vendor/bin/phpunit --testdox --colors=always || true

  build-and-push:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/eco-go:backend-${{ github.sha }}
          ${{ env.DOCKER_USERNAME }}/eco-go:backend-latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ env.DOCKER_USERNAME }}/eco-go:frontend-${{ github.sha }}
          ${{ env.DOCKER_USERNAME }}/eco-go:frontend-latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    # Temp fix for https://github.com/docker/build-push-action/issues/252
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to GKE
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@v1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    - name: Deploy to GKE
      run: |
        # Update image tags in a single operation
        sed -i -e "s|joelkodji/eco-go:backend-.*|joelkodji/eco-go:backend-${{ github.sha }}|" \
               -e "s|joelkodji/eco-go:frontend-.*|joelkodji/eco-go:frontend-${{ github.sha }}|" \
               kubernetes/*.yaml

        # Apply critical resources first
        kubectl apply -f kubernetes/configmap.yaml
        kubectl apply -f kubernetes/postgres.yaml
        kubectl apply -f kubernetes/pgadmin.yaml
        
        # Wait for database to be ready
        kubectl wait --for=condition=ready pod -l app=postgres --timeout=120s
        kubectl wait --for=condition=ready pod -l app=pgadmin --timeout=120s
        
        # Apply remaining resources
        kubectl apply -f kubernetes/backend.yaml
        kubectl apply -f kubernetes/frontend.yaml
        kubectl apply -f kubernetes/ingress.yaml
        
        # Verify deployments with increased timeouts
        kubectl rollout status deployment/postgres --timeout=300s
        kubectl rollout status deployment/pgadmin --timeout=300s
        kubectl rollout status deployment/backend --timeout=300s
        kubectl rollout status deployment/frontend --timeout=300s

      env:
        KUBECONFIG: ${{ github.workspace }}/.kube/config

    - name: Verify Deployment
      if: success()
      run: |
        echo "Deployment completed successfully"
        kubectl get pods -o wide

    - name: Deployment Failed
      if: failure()
      run: |
        echo "Deployment failed - collecting debug information"
        kubectl get pods
        kubectl describe pods
        kubectl get events --sort-by='.lastTimestamp'